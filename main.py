# Словари для преобразования текста в числа
numbers = {
    "ноль": 0,
    "один": 1,
    "одна": 1,
    "две": 2,
    "два": 2,
    "три": 3,
    "четыре": 4,
    "пять": 5,
    "шесть": 6,
    "семь": 7,
    "восемь": 8,
    "девять": 9,
    "десять": 10,
    "одиннадцать": 11,
    "двенадцать": 12,
    "тринадцать": 13,
    "четырнадцать": 14,
    "пятнадцать": 15,
    "шестнадцать": 16,
    "семнадцать": 17,
    "восемнадцать": 18,
    "девятнадцать": 19,
    "двадцать": 20,
    "тридцать": 30,
    "сорок": 40,
    "пятьдесят": 50,
    "шестьдесят": 60,
    "семьдесят": 70,
    "восемьдесят": 80,
    "девяносто": 90,
    "сто": 100,
    "двести": 200,
    "триста": 300,
    "четыреста": 400,
    "пятьсот": 500,
    "шестьсот": 600,
    "семьсот": 700,
    "восемьсот": 800,
    "девятьсот": 900
}

# Возможные математические знаки
signs = {
    'плюс': '+',
    'минус': '-',
    'умножить': '*',
    'разделить': '/',
    'в': '**'
}

# Словарь для перевода в десятичную дробь
fract = {
    'десятых': 10,
    'десятая': 10,
    'сотых': 100,
    'сотая': 100,
    'тысячных': 1000,
    'тысячная': 1000,
}


def parse_number(inp, start):
    """
    Парсит число, на начало которого указывает индекс start
    """
    is_fract = False  # Флаг на то, что началась дробная часть
    integer = 0  # Целая часть числа
    fraction = 0  # Дробная часть числа
    for ind in range(start, len(inp)):
        if inp[ind] in numbers:  # Если число
            if is_fract:  # Если сейчас мы считаем дробную часть
                fraction += numbers[inp[ind]]  # Прибавляем к дробной части число
            else:
                integer += numbers[inp[ind]]  # Прибавляем к целой части число
        elif inp[ind] in ['целых', 'целая']:
            is_fract = True  # Переключаем флаг
        elif inp[ind] in fract:
            fraction /= fract[inp[ind]]  # Превращаем в дробную часть путем деления
            return integer + fraction, ind + 1  # Возвращаем число и индекс с которого надо продолжить парсинг
        else:
            return integer + fraction, ind  # Возвращаем число и индекс с которого надо продолжить парсинг
    return integer + fraction, len(inp)  # Возвращаем число и индекс с которого надо продолжить парсинг


def parse_sign(inp, start):
    """
    Парсит математический знак, на начало которого указывает индекс start
    """
    if inp[start] in ['плюс', 'минус']:
        return signs[inp[start]], start + 1  # Возвращаем символ и индекс с которого надо продолжить парсинг
    else:  # Умножить или разделить
        return signs[inp[start]], start + 2  # Сдвигаем индекс на 2, чтобы пропустить предлог "на"(умножить на)


def calculate(inp):
    """
    Вычисляет выражение
    """
    list_of_exp = []  # Список с преобразованными числами и знаками
    ind = 0
    while ind < len(inp):  # Перебор всех слов
        if inp[ind] in numbers:  # Если это слово обозначает число
            # Парсим число и получаем индекс, с которого надо будет продолжить парсить строку
            num, ind = parse_number(inp, ind)
            list_of_exp.append(str(num))  # Добавляем в список
        elif inp[ind] in signs:
            # Парсим знак и получаем индекс, с которого надо будет продолжить парсить строку
            sign, ind = parse_sign(inp, ind)
            list_of_exp.append(sign)  # Добавляем в список

    str_of_exp = ' '.join(list_of_exp)  # Преобразуем обратно в строку
    print(str_of_exp)
    return eval(str_of_exp)  # eval() считает математическое выражение


if __name__ == '__main__':
    # Чтение входных данных из файла
    with open('input.txt', 'r', encoding='utf-8') as file:
        input_expression = file.read().strip().split()
    result = calculate(input_expression)
    print(int(result) if result == int(result) else round(result, 6))  # Ожидаемый вывод: результат вычисления
